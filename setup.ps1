<#
PowerShell setup script for the scout-demo-service repository

Features:
 - Installs npm dependencies (optional)
 - Starts the app (node app.js) in the background and captures PID/logs (optional)
 - Optionally runs tests
 - Optionally builds Docker image
 - Verifies HTTP endpoint (http://localhost:3000/ by default)
 - Optional "Yolo" mode to auto-approve prompts (dangerous)

Usage examples:
 PowerShell (run as normal user):
  Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; .\setup.ps1 -InstallDeps -StartApp

 With auto-approve (Yolo) - only use if you understand the risk:
  Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass; .\setup.ps1 -InstallDeps -StartApp -Yolo

Author: Generated by assistant
#>

param(
    [switch]$InstallDeps = $true,
    [switch]$StartApp = $true,
    [switch]$RunTests = $true,
    [switch]$BuildDocker = $true,
    [switch]$Yolo = $true,
    [int]$Port = 3000,
    [int]$TimeoutSeconds = 20
)

$RepoPath = "C:\PERPLEXITY\scout-demo-service"
if (-not (Test-Path $RepoPath)) {
    Write-Error "Repository path '$RepoPath' not found. Please clone the repo into C:\PERPLEXITY\scout-demo-service first.";
    exit 1
}

function Confirm-OrExit($Message) {
    if ($Yolo) { return $true }
    $ans = Read-Host "$Message [y/N]"
    if ($ans -match '^[Yy]') { return $true }
    Write-Host "Aborting as user did not confirm."
    exit 2
}

Push-Location $RepoPath
try {
    if ($InstallDeps) {
        Write-Host "-- Installing npm dependencies..."
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
            Write-Warning "npm is not found in PATH. Please install Node.js (which includes npm) or run this script in an environment where npm is available."
        } else {
            if (-not $Yolo) { Confirm-OrExit "Run 'npm install' now in $RepoPath?" }
            Write-Host "Running: npm install"
            & npm install
            if ($LASTEXITCODE -ne 0) {
                Write-Warning "npm install returned exit code $LASTEXITCODE. You may need to inspect the output above.";
            }
        }
    }

    if ($RunTests) {
        Write-Host "-- Running tests (npm test)"
        if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
            Write-Warning "npm is not found in PATH. Skipping tests.";
        } else {
            if (-not $Yolo) { Confirm-OrExit "Run 'npm test' now?" }
            & npm test
            if ($LASTEXITCODE -ne 0) {
                Write-Warning "npm test returned exit code $LASTEXITCODE.";
            }
        }
    }

    if ($BuildDocker) {
        Write-Host "-- Building Docker image 'scout-demo:v1'"
        if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
            Write-Warning "docker is not found in PATH. Please install Docker if you want to build the container.";
        } else {
            if (-not $Yolo) { Confirm-OrExit "Run 'docker build -t scout-demo:v1 .' now?" }
            docker build -t scout-demo:v1 .
            if ($LASTEXITCODE -ne 0) { Write-Warning "docker build failed with exit code $LASTEXITCODE." }
        }
    }

    $appProc = $null
    if ($StartApp) {
        Write-Host "-- Starting app (node app.js)"
        if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
            Write-Warning "node is not found in PATH. Please install Node.js to run the app.";
        } else {
            if (-not $Yolo) { Confirm-OrExit "Start the Node app now (node app.js)?" }

            $logOut = Join-Path $RepoPath "app.stdout.log"
            $logErr = Join-Path $RepoPath "app.stderr.log"

            # Start the app in background and capture process info
            $startInfo = @{ FilePath = (Get-Command node).Source; ArgumentList = 'app.js'; WorkingDirectory = $RepoPath; RedirectStandardOutput = $logOut; RedirectStandardError = $logErr; WindowStyle = 'Hidden' }
            $appProc = Start-Process @startInfo -PassThru
            Write-Host "Started node with PID $($appProc.Id). Logs: $logOut and $logErr"

            Write-Host "Waiting up to $TimeoutSeconds seconds for http://localhost:$Port/ ..."
            $end = (Get-Date).AddSeconds($TimeoutSeconds)
            $ok = $false
            while ((Get-Date) -lt $end) {
                try {
                    $resp = Invoke-WebRequest -Uri "http://localhost:$Port/" -UseBasicParsing -TimeoutSec 3 -ErrorAction Stop
                    if ($resp.StatusCode -ge 200 -and $resp.StatusCode -lt 400) {
                        Write-Host "OK: Received HTTP $($resp.StatusCode) from http://localhost:$Port/"
                        $ok = $true
                        break
                    }
                } catch {
                    Start-Sleep -Seconds 1
                }
            }
            if (-not $ok) {
                Write-Warning "Timed out waiting for http://localhost:$Port/ to respond. Check logs at $logOut and $logErr"
            }
        }
    }

    Write-Host "-- Setup script finished."
    if ($appProc) {
        Write-Host "App is running with PID $($appProc.Id). To stop: Stop-Process -Id $($appProc.Id)"
    }
} finally {
    Pop-Location
}

# End of script
